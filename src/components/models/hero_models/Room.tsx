/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 optimized-room.glb 
*/

import { useMemo } from "react";
import { useGLTF } from "@react-three/drei";
import { EffectComposer, SelectiveBloom } from "@react-three/postprocessing";
import { BlendFunction } from "postprocessing";
import * as THREE from "three";
import type { JSX } from "react";

export function Room(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF("/models/optimized-room.glb");


  // Create custom materials
  const curtainMaterial = new THREE.MeshPhongMaterial({
    color: "#d90429",
  });

  const tableMaterial = new THREE.MeshPhongMaterial({
    color: "#582f0e",
  });

  const radiatorMaterial = new THREE.MeshPhongMaterial({
    color: "#fff",
  });

  const compMaterial = new THREE.MeshStandardMaterial({
    color: "#fff",
  });

  const pillowMaterial = new THREE.MeshPhongMaterial({
    color: "#8338ec",
  });

  const chairMaterial = new THREE.MeshPhongMaterial({
    color: "#000",
  });

  // Collect screen meshes for bloom effect
  const screenMeshes = useMemo(() => {
    const screens: THREE.Mesh[] = [];
    Object.entries(nodes).forEach(([key, node]) => {
      if ('geometry' in node && 'material' in node && key.includes('emis')) {
        screens.push(node as THREE.Mesh);
      }
    });
    return screens;
  }, [nodes]);

  return (
    <group {...props} dispose={null}>
      <EffectComposer>
        <SelectiveBloom
          selection={screenMeshes}
          intensity={1.5}
          luminanceThreshold={0.2}
          luminanceSmoothing={0.9}
          blendFunction={BlendFunction.ADD}
        />
      </EffectComposer>

      {/* Render all the meshes from the GLTF model */}
      {Object.entries(nodes).map(([key, node]) => {
        // Check if the node is a mesh
        if ('geometry' in node && 'material' in node) {
          const mesh = node as THREE.Mesh;

          // Apply custom materials based on mesh names
          let material = materials[Object.keys(materials)[0]] || new THREE.MeshStandardMaterial({ color: '#ffffff' });

          if (key.includes('curtain') || key.includes('_________6')) {
            material = curtainMaterial;
          } else if (key.includes('table') || key.includes('cabin')) {
            material = tableMaterial;
          } else if (key.includes('chair')) {
            material = chairMaterial;
          } else if (key.includes('comp')) {
            material = compMaterial;
          } else if (key.includes('pillow')) {
            material = pillowMaterial;
          } else if (key.includes('radiator')) {
            material = radiatorMaterial;
          }

          return (
            <mesh
              key={key}
              geometry={mesh.geometry}
              material={material}
            />
          );
        }
        return null;
      })}
    </group>
  );
}

useGLTF.preload("/models/optimized-room.glb");


